/**
 * @param {number[][]} edges
 * @return {number[]}
 */
var findRedundantConnection = function(edges) {
    let visited = new Set();
    let reCon = []
    edges.forEach((edge)=>{
        dfs(edge)
    })
    function dfs(edge){
        let source = edge[0]
        let destination = edge[1]
        // if(visited.has(destination)){
        //     if(!reCon.length || reCon[1] < destination){
        //          reCon = [source, destination]
        //     }
        // }
        if(visited.has(source) && visited.has(destination)){
            reCon.push([source, destination])
        }
        visited.add(source)
        visited.add(destination)
    }
    return reCon[reCon.length-1];
};


[[9,10],[5,8],[2,6],[1,5],[3,8],[4,9],[8,10],[4,10],[6,8],[7,9]]
[[1,3],[3,4],[1,5],[3,5],[2,3]]
[[1,4],[3,4],[1,3],[1,2],[4,5]]


/**
 * @param {number[][]} edges
 * @return {number[]}
 */
 var findRedundantConnection = function(edges) {
    let n = edges.length
    let par = [...Array(n).keys()] //[1,2,3]
    let rank = Array(3).fill(1) //[1,1,1]
    let res = []
    function find(n1){
       let p = par[n1]
       while(p != par[p]){
           par[p] = par[par[p]]  
           p = par[p];
        }
        return p;
    }
    
    function union(n1, n2){
       let p1 = find(n1);
        let p2 = find(n2);
        if(p1 === p2){
            res.push(n1,n2)
        }
        if(rank[p1] > rank[p2]){
            par[p2] = p1
            rank[p1] += rank[p2];
        }else{
            par[p1] = p2
            rank[p2] += rank[p1];
        }
        console.log(par)
    }
    console.log(par)
    edges.forEach((edge)=>{
        union(edge[0], edge[1])
    })
    return res
};